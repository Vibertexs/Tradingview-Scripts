//@version=5
// indicator("Scalping Bot 1.0", overlay=true, timeframe="", timeframe_gaps=true)
strategy("Scalping Bot 1.0", overlay=true)

tradingSession = input.session("1300-1700", "Session")


src = input(close, "Source input")


//////////////////////////// S U P E R T R E N D        I N I T I A L I Z A T I O N ////////////////////////////

// Supertrend 1
atrPeriod1 = input(10, "ATR1 Length", inline = "3")
factor1 = input.float(1.5, "Factor1", step = 0.1, inline = "3")

[supertrend1, direction1] = ta.supertrend(factor1, atrPeriod1)

// bodyMiddle1 = plot((open + close) / 2, display=display.none)
upTrend1 = plot(direction1 < 0 ? supertrend1 : na, "Up Trend", color = color.green, style=plot.style_linebr)
downTrend1 = plot(direction1 < 0? na : supertrend1, "Down Trend", color = color.red, style=plot.style_linebr)

// Supertrend 2
atrPeriod2 = input(11, "ATR2 Length", inline = "4")
factor2 = input.float(2.0, "Factor2", step = 0.1, inline = "4")

[supertrend2, direction2] = ta.supertrend(factor2, atrPeriod2)

// bodyMiddle2 = plot((open + close) / 2, display=display.none)
upTrend2 = plot(direction2 < 0 ? supertrend2 : na, "Up Trend", color = color.green, style=plot.style_linebr)
downTrend2 = plot(direction2 < 0? na : supertrend2, "Down Trend", color = color.red, style=plot.style_linebr)

// Supertrend 3
atrPeriod3 = input(12, "ATR3 Length", inline = "5")
factor3 = input.float(3.0, "Factor3", step = 0.1, inline = "5")

[supertrend3, direction3] = ta.supertrend(factor3, atrPeriod3)

// bodyMiddle3 = plot((open + close) / 2, display=display.none)
upTrend3 = plot(direction3 < 0 ? supertrend3 : na, "Up Trend", color = color.green, style=plot.style_linebr)
downTrend3 = plot(direction3 < 0? na : supertrend3, "Down Trend", color = color.red, style=plot.style_linebr)

// 100 EMA
ema100 = ta.ema(close, 200)

// Color of the 100 EMA

// This code compiles
directionIsSame = if ((direction1 == direction2) and (direction2  == direction3) and (direction3  == direction1))
    true
else
    false

color theColor = color.gray
if(directionIsSame == true)
    if(direction1 < 0) // If all up
        theColor := color.green
    else if(direction1 > 0) // If all down
        theColor := color.red
    else // If not the same
        theColor := color.gray


//////////////////////////// A V E R A G E    T R U E    R A N G E ////////////////////////////
lowVolatility = input.int(title="Range Value", defval = 25)
length = input.int(title="Length", defval=14, minval=1)
smoothing = input.string(title="Smoothing", defval="RMA", options=["RMA", "SMA", "EMA", "WMA"])
ma_function(source, length) =>
	switch smoothing
		"RMA" => ta.rma(source, length)
		"SMA" => ta.sma(source, length)
		"EMA" => ta.ema(source, length)
		=> ta.wma(source, length)

//////////////////////////////////////////////////////////////////////////////////////////////
plot(ema100, "100 EMA", color=theColor, style=plot.style_linebr)

buy = false
sell = false
exitOut = false
isTrending = ta.tr(true) > lowVolatility


// Is tradingSession
canTrade = time(timeframe.period, tradingSession) and directionIsSame



if(canTrade) // This logic needs to be fixed
    if(direction1<0)
        buy := true
    else
        sell := true
else
    exitOut := true
///////////////////////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// P O S I T I O N    L O G I C ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

// Calculate the number of lot
account_balance = input(10000, "Account Balance")
risk_percentage = input.float(1, "Risk Percentage")

risk_percentage := risk_percentage/100
float stopLossDistance = 0.0
number_of_lots = account_balance*risk_percentage / (stopLossDistance)

if(buy == true)
    stopLossDistance:=(close-supertrend2)
if(sell == true)
    stopLossDistance:=(supertrend2-open)


// if bar_index % 1 == 0
//     label.new(bar_index, na, "Number of pips = " + str.tostring(math.abs(number_of_lots), format.mintick) + "\nðŸ ‡", yloc = yloc.abovebar, style = label.style_none, textcolor = color.black, size = size.normal)

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////



// Plot Labels
plotcandle(open, high, low, close, title='Bar', color = buy ? color.green : sell ? color.red : exitOut ? color.gray : na, wickcolor= buy ? color.green : sell ? color.red : exitOut ? color.gray : na)

bSYmbol = str.tostring(open)
plotshape(buy and not buy[1], style = shape.labelup, location = location.belowbar, 
         color = color.green, size = size.small, text = "B", textcolor = color.white)
plotshape(sell and not sell[1], style = shape.labeldown, location = location.abovebar, 
         color = color.red, size = size.small, text = "S", textcolor = color.white)
plotshape(exitOut and not exitOut[1], style = shape.labeldown, location = location.abovebar, 
         color = color.yellow, size = size.small, text = "E", textcolor = color.white)


strategy.entry("Long", strategy.long, number_of_lots, when = buy)
strategy.entry("Short", strategy.short, 100.0, when = sell)

strategy.close("Long", when = sell or exitOut)
strategy.close("Short", when = buy or exitOut)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
plotchar(ta.rising(close, 5), "`plotchar()`", "ðŸ …", location.belowbar, color.lime, size = size.small)
plotshape(ta.falling(close, 5), "`plotchar()`", location = location.abovebar, color = na, text = "â€¢`plotshape()â€¢`\nðŸ ‡", textcolor = color.fuchsia, size = size.huge)





