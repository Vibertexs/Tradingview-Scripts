//@version=5
indicator("RSI Trends v3 with ZEMA (Optional HMA Smooth Anchoring)", format=format.price, precision=2, timeframe="", timeframe_gaps=true)

// === INPUT SETTINGS ===
rsiLengthInput = input.int(37, minval=1, title="RSI Length")
rsiSourceInput = input.source(close, "Source")
maLengthInput = input.int(38, title="ZEMA Length")
hmaLength = input.int(21, title="HMA Length")
bandGap = input.int(4, minval=1, maxval=25, title="Gap from 50")
rsiLookback = input.int(15, title="Range Look Back Period")
anchorHMA = input.bool(true, title="Anchor HMA to 50 When ZEMA is Purple (Range)")
hma_threshold = input.float(0.25, step=0.01, title="HMA Slope Threshold")
hmaRSIgate = input.bool(true, title="Enable RSI Gate for HMA Colors")
rsiHighGate = input.float(65, title="RSI High Gate", step=0.1)
rsiLowGate = input.float(35, title="RSI Low Gate", step=0.1)
preserveLastColor = input.bool(true, title="Preserve Last Color When Flat")

// === RSI & ZEMA ===
up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))

zema(source, length) =>
    ema1 = ta.ema(source, length)
    ema2 = ta.ema(ema1, length)
    ema1 + (ema1 - ema2)

rsiZEMA = zema(rsi, maLengthInput)

// === BAND CALCULATION ===
rsiUpperBandValue = 50 + bandGap
rsiLowerBandValue = 50 - bandGap

// === ZEMA COLOR LOGIC ===
numberOfTimesInRange = 0
for i = 0 to rsiLookback
    if (rsiZEMA[i] < rsiUpperBandValue and rsiZEMA[i] > rsiLowerBandValue)
        numberOfTimesInRange := numberOfTimesInRange + 1

rsiZEMAColor = color.gray
if (numberOfTimesInRange >= rsiLookback)
    rsiZEMAColor := color.purple
else if (rsiZEMA > rsiUpperBandValue)
    rsiZEMAColor := color.green
else if (rsiZEMA < rsiLowerBandValue)
    rsiZEMAColor := color.red

isPurple = rsiZEMAColor == color.purple

// === HMA FUNCTION ===
hma(src, len) =>
    halfLength = math.round(len / 2)
    sqrtLength = math.round(math.sqrt(len))
    wma1 = ta.wma(src, len)
    wma2 = ta.wma(src, halfLength)
    ta.wma(2 * wma2 - wma1, sqrtLength)

// Proxy ZEMA for HMA: if anchoring enabled and purple, feed 50, else real ZEMA
zemaProxy = (anchorHMA and isPurple) ? 50 : rsiZEMA
hmaValue = hma(zemaProxy, hmaLength)
hmaSlope = hmaValue - hmaValue[1]

// === HMA COLOR LOGIC WITH GATE OVERRIDE AND LAST COLOR PRESERVATION ===
var color lastHMAColor = color.gray

// Determine the "raw" color for this bar
rawHMAColor = color.gray

// Priority 1: Purple when anchored and ZEMA is in range
if (isPurple and anchorHMA)
    rawHMAColor := color.purple
// Priority 2: Force green when above high gate (regardless of slope)
else if (hmaRSIgate and hmaValue > rsiHighGate)
    rawHMAColor := color.green
// Priority 3: Force red when below low gate (regardless of slope)
else if (hmaRSIgate and hmaValue < rsiLowGate)
    rawHMAColor := color.red
// Priority 4: Normal slope-based coloring for all other cases
else
    if (hmaSlope > hma_threshold)
        rawHMAColor := color.green
    else if (hmaSlope < -hma_threshold)
        rawHMAColor := color.red
    else
        rawHMAColor := color.gray

// Now apply the "preserve last color" logic if enabled
hmaColor = rawHMAColor
if preserveLastColor
    if rawHMAColor == color.gray
        hmaColor := lastHMAColor
    else
        hmaColor := rawHMAColor
    // Update lastHMAColor only when not gray
    if rawHMAColor != color.gray
        lastHMAColor := rawHMAColor

// === PLOTS ===
plot(rsi, "RSI", color=#7E57C2)
plot(rsiZEMA, "RSI-based ZEMA", color=rsiZEMAColor)
plot(hmaValue, "HMA (Smooth Anchored, Optional)", color=hmaColor, linewidth=2)

// === DYNAMIC BANDS ===
upperBandPlot = plot(rsiUpperBandValue, title="RSI Upper Band", color=#787B86, linewidth=1)
midlinePlot = plot(50, title="RSI Middle Band", color=color.new(#787B86, 50), linewidth=1)
lowerBandPlot = plot(rsiLowerBandValue, title="RSI Lower Band", color=#787B86, linewidth=1)
fill(upperBandPlot, lowerBandPlot, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")

// === PLOTS FOR GATE LINES ===
plot(rsiHighGate, title="RSI High Gate", color=color.new(color.green, 60), linewidth=1)
plot(rsiLowGate, title="RSI Low Gate", color=color.new(color.red, 60), linewidth=1)
