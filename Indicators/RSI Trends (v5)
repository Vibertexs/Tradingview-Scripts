//@version=5
indicator("RSI Trends v5 (JMA accurate, adaptive)", format=format.price, precision=2)

// === INPUT SETTINGS ===
rsiLengthInput = input.int(60, minval=1, title="RSI Length")
rsiSourceInput = input.source(close, "Source")
jmaLenInput    = input.int(20, title="JMA Length")
jmaPhaseInput  = input.int(-100, minval=-100, maxval=100, step=10, title="JMA Phase")
jmaPowerInput  = input.float(0.8, minval=0.1, maxval=1.0, step=0.01, title="JMA Power (Factor)")
bandGap        = input.int(4, minval=1, maxval=25, title="Gap from 50")
rsiLookback    = input.int(18, title="Range Look Back Period")
preserveLastColor = input.bool(true, title="Preserve Last Color When Flat")

// === CALCULATE RSI ===
up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))

// === FULL JMA CALCULATION ===
// Pre-calculate constants
phase_value = math.min(math.max((jmaPhaseInput * 0.01) + 1.5, 0.5), 2.5)
beta = jmaPowerInput * (jmaLenInput - 1) / ((jmaPowerInput * (jmaLenInput - 1)) + 2)
len1 = math.max((math.log(math.sqrt(0.5*(jmaLenInput-1))) / math.log(2.0)) + 2.0, 0)
pow1 = math.max(len1 - 2.0, 0.5)
len2 = math.sqrt(0.5*(jmaLenInput-1))*len1
pow1Reciprocal = 1.0 / pow1
avgVoltyAlpha = 2.0 / (math.max(4.0 * jmaLenInput, 65) + 1.0)
div = 1.0/(10.0 + 10.0*(math.min(math.max(jmaLenInput-10,0),100))/100.0)

// Global JMA variables
var float upperBand = na
var float lowerBand = na
var float ma1 = na
var float jma_value = na
var float vSum = 0.0
var float det0 = 0.0
var float det1 = 0.0
var float avgVolty = 0.0
var array<float> volty_array = array.new<float>(11, 0.0)

// Initialize
if barstate.isfirst or na(jma_value)
    upperBand := rsi
    lowerBand := rsi
    ma1 := rsi
    jma_value := rsi
    avgVolty := 0.0
    vSum := 0.0
    det0 := 0.0
    det1 := 0.0

// Volatility calculations
del1 = rsi - upperBand
del2 = rsi - lowerBand
volty = math.abs(del1) == math.abs(del2) ? 0 : math.max(math.abs(del1), math.abs(del2))

// Update volatility array
array.unshift(volty_array, volty)
if array.size(volty_array) > 11
    array.pop(volty_array)

// Calculate vSum
vSum := vSum + (volty - (array.size(volty_array) > 10 ? array.get(volty_array, 10) : 0)) * div

// Update average volatility
avgVolty := na(avgVolty) ? vSum : avgVolty + avgVoltyAlpha * (vSum - avgVolty)

// Relative volatility
rvolty = math.min(math.max(avgVolty > 0 ? volty / avgVolty : 1.0, 1.0), math.pow(len1, pow1Reciprocal))

// Adaptive parameters
pow2 = math.pow(rvolty, pow1)
Kv = math.pow(len2/(len2+1), math.sqrt(pow2))

// Update volatility bands
upperBand := del1 > 0 ? rsi : rsi - Kv * del1
lowerBand := del2 < 0 ? rsi : rsi - Kv * del2

// Dynamic factor alpha
alpha = math.pow(beta, pow2)
alphaSquared = alpha * alpha
oneMinusAlpha = 1.0 - alpha
oneMinusAlphaSquared = oneMinusAlpha * oneMinusAlpha

// JMA core calculation
ma1 := rsi + (alpha * (ma1 - rsi))
det0 := (rsi - ma1) * (1 - beta) + beta * det0
ma2 = ma1 + (phase_value * det0)
det1 := ((ma2 - nz(jma_value, rsi)) * oneMinusAlphaSquared) + (alphaSquared * nz(det1, 0))
jma_value := nz(jma_value, rsi) + det1

// === STATIC BANDS AROUND 50 ===
rsiUpperBandValue = 50 + bandGap
rsiLowerBandValue = 50 - bandGap
bandMidpoint = 50

// === RANGE DETECTION FUNCTION ===
isPingPongMarket() =>
    maxConsecutive = 5
    aboveCount = 0
    belowCount = 0
    for i = 0 to math.min(rsiLookback, bar_index)
        if jma_value[i] > bandMidpoint
            aboveCount += 1
            belowCount := 0
        else if jma_value[i] < bandMidpoint
            belowCount += 1
            aboveCount := 0
        if aboveCount > maxConsecutive or belowCount > maxConsecutive
            false
    true

// === JMA COLORING WITH TRENDS ===
numberOfTimesInRange = 0
for i = 0 to math.min(rsiLookback, bar_index)
    if (jma_value[i] < rsiUpperBandValue and jma_value[i] > rsiLowerBandValue)
        numberOfTimesInRange += 1

// Color logic
var color lastTrendColor = color.yellow
jmaColor = color.yellow  // Default

if (isPingPongMarket() and numberOfTimesInRange >= math.min(rsiLookback, bar_index + 1))
    jmaColor := color.fuchsia
    lastTrendColor := color.fuchsia
else if (jma_value > rsiUpperBandValue)
    jmaColor := color.lime
    lastTrendColor := color.lime
else if (jma_value < rsiLowerBandValue)
    jmaColor := color.red
    lastTrendColor := color.red
else if preserveLastColor
    jmaColor := lastTrendColor
else
    jmaColor := color.yellow

// === PLOTS ===
plot(rsi, "RSI", color=color.new(color.blue, 70), linewidth=1)
plot(jma_value, "JMA with Phase & Power", color=jmaColor, linewidth=4)

// === STATIC BANDS PLOTS ===
bandColor = color.new(color.orange, 0)
plot(rsiUpperBandValue, title="RSI Upper Band", color=bandColor, linewidth=1)
plot(bandMidpoint, title="RSI Midpoint (50)", color=color.new(bandColor, 50), linewidth=1)
plot(rsiLowerBandValue, title="RSI Lower Band", color=bandColor, linewidth=1)
fill(plot(rsiUpperBandValue), plot(rsiLowerBandValue), color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")

// === DEBUG TABLE (Optional - comment out if not needed) ===
var table debug_table = table.new(position.top_right, 2, 4, bgcolor=color.white, border_width=1)
if barstate.islast
    table.cell(debug_table, 0, 0, "RSI:", text_color=color.black)
    table.cell(debug_table, 1, 0, str.tostring(rsi, "#.##"), text_color=color.black)
    table.cell(debug_table, 0, 1, "JMA:", text_color=color.black)
    table.cell(debug_table, 1, 1, str.tostring(jma_value, "#.##"), text_color=color.black)
    table.cell(debug_table, 0, 2, "Phase:", text_color=color.black)
    table.cell(debug_table, 1, 2, str.tostring(phase_value, "#.##"), text_color=color.black)
    table.cell(debug_table, 0, 3, "Color:", text_color=color.black)
    table.cell(debug_table, 1, 3, jmaColor == color.lime ? "BULL" : jmaColor == color.red ? "BEAR" : jmaColor == color.fuchsia ? "RANGE" : "NEUTRAL", text_color=color.black)

// === ALERTS ===
alertcondition(ta.crossover(jma_value, rsiUpperBandValue), title="RSI JMA Bullish", message="RSI-JMA crossed above upper band - Bullish trend")
alertcondition(ta.crossunder(jma_value, rsiLowerBandValue), title="RSI JMA Bearish", message="RSI-JMA crossed below lower band - Bearish trend")
alertcondition(jmaColor == color.fuchsia and jmaColor[1] != color.fuchsia, title="RSI JMA Range", message="RSI-JMA detected ranging market")
